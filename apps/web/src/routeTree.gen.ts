/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as ProtectedConnectionsImport } from './routes/_protected/connections'
import { Route as AuthLoginIndexImport } from './routes/auth/login/index'
import { Route as AuthCallbackIndexImport } from './routes/auth/callback/index'
import { Route as ProtectedConnectionsIndexImport } from './routes/_protected/connections/index'
import { Route as ProtectedConnectionsConnectionIdImport } from './routes/_protected/connections/$connectionId'
import { Route as ProtectedConnectionsConnectionIdIndexImport } from './routes/_protected/connections/$connectionId/index'
import { Route as ProtectedConnectionsNewUfsmIndexImport } from './routes/_protected/connections/new/ufsm/index'
import { Route as ProtectedConnectionsConnectionIdModuleSlugIndexImport } from './routes/_protected/connections/$connectionId/$moduleSlug/index'

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedConnectionsRoute = ProtectedConnectionsImport.update({
  path: '/connections',
  getParentRoute: () => ProtectedRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  path: '/auth/login/',
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackIndexRoute = AuthCallbackIndexImport.update({
  path: '/auth/callback/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedConnectionsIndexRoute = ProtectedConnectionsIndexImport.update({
  path: '/',
  getParentRoute: () => ProtectedConnectionsRoute,
} as any)

const ProtectedConnectionsConnectionIdRoute =
  ProtectedConnectionsConnectionIdImport.update({
    path: '/$connectionId',
    getParentRoute: () => ProtectedConnectionsRoute,
  } as any)

const ProtectedConnectionsConnectionIdIndexRoute =
  ProtectedConnectionsConnectionIdIndexImport.update({
    path: '/',
    getParentRoute: () => ProtectedConnectionsConnectionIdRoute,
  } as any)

const ProtectedConnectionsNewUfsmIndexRoute =
  ProtectedConnectionsNewUfsmIndexImport.update({
    path: '/new/ufsm/',
    getParentRoute: () => ProtectedConnectionsRoute,
  } as any)

const ProtectedConnectionsConnectionIdModuleSlugIndexRoute =
  ProtectedConnectionsConnectionIdModuleSlugIndexImport.update({
    path: '/$moduleSlug/',
    getParentRoute: () => ProtectedConnectionsConnectionIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_protected/connections': {
      preLoaderRoute: typeof ProtectedConnectionsImport
      parentRoute: typeof ProtectedImport
    }
    '/auth/': {
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected/connections/$connectionId': {
      preLoaderRoute: typeof ProtectedConnectionsConnectionIdImport
      parentRoute: typeof ProtectedConnectionsImport
    }
    '/_protected/connections/': {
      preLoaderRoute: typeof ProtectedConnectionsIndexImport
      parentRoute: typeof ProtectedConnectionsImport
    }
    '/auth/callback/': {
      preLoaderRoute: typeof AuthCallbackIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login/': {
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected/connections/$connectionId/': {
      preLoaderRoute: typeof ProtectedConnectionsConnectionIdIndexImport
      parentRoute: typeof ProtectedConnectionsConnectionIdImport
    }
    '/_protected/connections/$connectionId/$moduleSlug/': {
      preLoaderRoute: typeof ProtectedConnectionsConnectionIdModuleSlugIndexImport
      parentRoute: typeof ProtectedConnectionsConnectionIdImport
    }
    '/_protected/connections/new/ufsm/': {
      preLoaderRoute: typeof ProtectedConnectionsNewUfsmIndexImport
      parentRoute: typeof ProtectedConnectionsImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  ProtectedRoute.addChildren([
    ProtectedConnectionsRoute.addChildren([
      ProtectedConnectionsConnectionIdRoute.addChildren([
        ProtectedConnectionsConnectionIdIndexRoute,
        ProtectedConnectionsConnectionIdModuleSlugIndexRoute,
      ]),
      ProtectedConnectionsIndexRoute,
      ProtectedConnectionsNewUfsmIndexRoute,
    ]),
  ]),
  AuthIndexRoute,
  AuthCallbackIndexRoute,
  AuthLoginIndexRoute,
])

/* prettier-ignore-end */
