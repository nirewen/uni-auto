/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as AuthLoginIndexImport } from './routes/auth/login/index'
import { Route as ProtectedProfileIndexImport } from './routes/_protected/profile/index'
import { Route as ProtectedConnectionsIndexImport } from './routes/_protected/connections/index'
import { Route as ProtectedAdminIndexImport } from './routes/_protected/admin/index'
import { Route as ProtectedProfileInvitesImport } from './routes/_protected/profile/invites'
import { Route as ProtectedConnectionsConnectionIdImport } from './routes/_protected/connections/$connectionId'
import { Route as ProtectedAdminUsersImport } from './routes/_protected/admin/users'
import { Route as ProtectedAdminQueueImport } from './routes/_protected/admin/queue'
import { Route as ProtectedAdminModulesImport } from './routes/_protected/admin/modules'
import { Route as ProtectedAdminInvitesImport } from './routes/_protected/admin/invites'
import { Route as ProtectedAdminConnectionsImport } from './routes/_protected/admin/connections'
import { Route as ProtectedConnectionsConnectionIdIndexImport } from './routes/_protected/connections/$connectionId/index'
import { Route as ProtectedConnectionsConnectionIdModuleSlugImport } from './routes/_protected/connections/$connectionId/$moduleSlug'
import { Route as ProtectedConnectionsNewUfsmIndexImport } from './routes/_protected/connections/new/ufsm/index'
import { Route as ProtectedConnectionsConnectionIdModuleSlugIndexImport } from './routes/_protected/connections/$connectionId/$moduleSlug/index'

// Create Virtual Routes

const ProtectedProfileLazyImport = createFileRoute('/_protected/profile')()
const ProtectedConnectionsLazyImport = createFileRoute(
  '/_protected/connections',
)()
const ProtectedAdminLazyImport = createFileRoute('/_protected/admin')()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const ProtectedProfileLazyRoute = ProtectedProfileLazyImport.update({
  path: '/profile',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/profile.lazy').then((d) => d.Route),
)

const ProtectedConnectionsLazyRoute = ProtectedConnectionsLazyImport.update({
  path: '/connections',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/connections.lazy').then((d) => d.Route),
)

const ProtectedAdminLazyRoute = ProtectedAdminLazyImport.update({
  path: '/admin',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/admin.lazy').then((d) => d.Route),
)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  path: '/login/',
  getParentRoute: () => AuthRoute,
} as any)

const ProtectedProfileIndexRoute = ProtectedProfileIndexImport.update({
  path: '/',
  getParentRoute: () => ProtectedProfileLazyRoute,
} as any)

const ProtectedConnectionsIndexRoute = ProtectedConnectionsIndexImport.update({
  path: '/',
  getParentRoute: () => ProtectedConnectionsLazyRoute,
} as any)

const ProtectedAdminIndexRoute = ProtectedAdminIndexImport.update({
  path: '/',
  getParentRoute: () => ProtectedAdminLazyRoute,
} as any)

const ProtectedProfileInvitesRoute = ProtectedProfileInvitesImport.update({
  path: '/invites',
  getParentRoute: () => ProtectedProfileLazyRoute,
} as any)

const ProtectedConnectionsConnectionIdRoute =
  ProtectedConnectionsConnectionIdImport.update({
    path: '/$connectionId',
    getParentRoute: () => ProtectedConnectionsLazyRoute,
  } as any)

const ProtectedAdminUsersRoute = ProtectedAdminUsersImport.update({
  path: '/users',
  getParentRoute: () => ProtectedAdminLazyRoute,
} as any)

const ProtectedAdminQueueRoute = ProtectedAdminQueueImport.update({
  path: '/queue',
  getParentRoute: () => ProtectedAdminLazyRoute,
} as any)

const ProtectedAdminModulesRoute = ProtectedAdminModulesImport.update({
  path: '/modules',
  getParentRoute: () => ProtectedAdminLazyRoute,
} as any)

const ProtectedAdminInvitesRoute = ProtectedAdminInvitesImport.update({
  path: '/invites',
  getParentRoute: () => ProtectedAdminLazyRoute,
} as any)

const ProtectedAdminConnectionsRoute = ProtectedAdminConnectionsImport.update({
  path: '/connections',
  getParentRoute: () => ProtectedAdminLazyRoute,
} as any)

const ProtectedConnectionsConnectionIdIndexRoute =
  ProtectedConnectionsConnectionIdIndexImport.update({
    path: '/',
    getParentRoute: () => ProtectedConnectionsConnectionIdRoute,
  } as any)

const ProtectedConnectionsConnectionIdModuleSlugRoute =
  ProtectedConnectionsConnectionIdModuleSlugImport.update({
    path: '/$moduleSlug',
    getParentRoute: () => ProtectedConnectionsConnectionIdRoute,
  } as any)

const ProtectedConnectionsNewUfsmIndexRoute =
  ProtectedConnectionsNewUfsmIndexImport.update({
    path: '/new/ufsm/',
    getParentRoute: () => ProtectedConnectionsLazyRoute,
  } as any)

const ProtectedConnectionsConnectionIdModuleSlugIndexRoute =
  ProtectedConnectionsConnectionIdModuleSlugIndexImport.update({
    path: '/',
    getParentRoute: () => ProtectedConnectionsConnectionIdModuleSlugRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_protected/admin': {
      preLoaderRoute: typeof ProtectedAdminLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/connections': {
      preLoaderRoute: typeof ProtectedConnectionsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/profile': {
      preLoaderRoute: typeof ProtectedProfileLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/auth/': {
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
    '/_protected/admin/connections': {
      preLoaderRoute: typeof ProtectedAdminConnectionsImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
    '/_protected/admin/invites': {
      preLoaderRoute: typeof ProtectedAdminInvitesImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
    '/_protected/admin/modules': {
      preLoaderRoute: typeof ProtectedAdminModulesImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
    '/_protected/admin/queue': {
      preLoaderRoute: typeof ProtectedAdminQueueImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
    '/_protected/admin/users': {
      preLoaderRoute: typeof ProtectedAdminUsersImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
    '/_protected/connections/$connectionId': {
      preLoaderRoute: typeof ProtectedConnectionsConnectionIdImport
      parentRoute: typeof ProtectedConnectionsLazyImport
    }
    '/_protected/profile/invites': {
      preLoaderRoute: typeof ProtectedProfileInvitesImport
      parentRoute: typeof ProtectedProfileLazyImport
    }
    '/_protected/admin/': {
      preLoaderRoute: typeof ProtectedAdminIndexImport
      parentRoute: typeof ProtectedAdminLazyImport
    }
    '/_protected/connections/': {
      preLoaderRoute: typeof ProtectedConnectionsIndexImport
      parentRoute: typeof ProtectedConnectionsLazyImport
    }
    '/_protected/profile/': {
      preLoaderRoute: typeof ProtectedProfileIndexImport
      parentRoute: typeof ProtectedProfileLazyImport
    }
    '/auth/login/': {
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof AuthImport
    }
    '/_protected/connections/$connectionId/$moduleSlug': {
      preLoaderRoute: typeof ProtectedConnectionsConnectionIdModuleSlugImport
      parentRoute: typeof ProtectedConnectionsConnectionIdImport
    }
    '/_protected/connections/$connectionId/': {
      preLoaderRoute: typeof ProtectedConnectionsConnectionIdIndexImport
      parentRoute: typeof ProtectedConnectionsConnectionIdImport
    }
    '/_protected/connections/$connectionId/$moduleSlug/': {
      preLoaderRoute: typeof ProtectedConnectionsConnectionIdModuleSlugIndexImport
      parentRoute: typeof ProtectedConnectionsConnectionIdModuleSlugImport
    }
    '/_protected/connections/new/ufsm/': {
      preLoaderRoute: typeof ProtectedConnectionsNewUfsmIndexImport
      parentRoute: typeof ProtectedConnectionsLazyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  ProtectedRoute.addChildren([
    ProtectedAdminLazyRoute.addChildren([
      ProtectedAdminConnectionsRoute,
      ProtectedAdminInvitesRoute,
      ProtectedAdminModulesRoute,
      ProtectedAdminQueueRoute,
      ProtectedAdminUsersRoute,
      ProtectedAdminIndexRoute,
    ]),
    ProtectedConnectionsLazyRoute.addChildren([
      ProtectedConnectionsConnectionIdRoute.addChildren([
        ProtectedConnectionsConnectionIdModuleSlugRoute.addChildren([
          ProtectedConnectionsConnectionIdModuleSlugIndexRoute,
        ]),
        ProtectedConnectionsConnectionIdIndexRoute,
      ]),
      ProtectedConnectionsIndexRoute,
      ProtectedConnectionsNewUfsmIndexRoute,
    ]),
    ProtectedProfileLazyRoute.addChildren([
      ProtectedProfileInvitesRoute,
      ProtectedProfileIndexRoute,
    ]),
  ]),
  AuthRoute.addChildren([AuthIndexRoute, AuthLoginIndexRoute]),
])

/* prettier-ignore-end */
